// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/thyyl/chatr/pkg/chat"
	"github.com/thyyl/chatr/pkg/common"
	"github.com/thyyl/chatr/pkg/config"
	"github.com/thyyl/chatr/pkg/forwarder"
	"github.com/thyyl/chatr/pkg/infra"
	"github.com/thyyl/chatr/pkg/match"
	"github.com/thyyl/chatr/pkg/uploader"
	"github.com/thyyl/chatr/pkg/user"
)

// Injectors from wire.go:

func InitializeChatServer(name string) (*common.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	httpLog, err := common.NewHttpLog(configConfig)
	if err != nil {
		return nil, err
	}
	engine := chat.NewGinServer(name, httpLog, configConfig)
	melodyChatConn := chat.NewMelodyChat(configConfig)
	router, err := infra.NewBrokerRouter(name)
	if err != nil {
		return nil, err
	}
	subscriber, err := infra.NewKafkaSubscriber(configConfig)
	if err != nil {
		return nil, err
	}
	messageSubscriber, err := chat.NewMessageSubscriber(name, router, configConfig, subscriber, melodyChatConn)
	if err != nil {
		return nil, err
	}
	universalClient, err := infra.NewRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	redisCacheImpl := infra.NewRedisCacheImpl(universalClient)
	session, err := infra.NewCassandraSession(configConfig)
	if err != nil {
		return nil, err
	}
	userClientConn, err := chat.NewUserClientConn(configConfig)
	if err != nil {
		return nil, err
	}
	userRepoImpl := chat.NewUserRepoImpl(session, userClientConn)
	userRepoCacheImpl := chat.NewUserRepoCacheImpl(redisCacheImpl, userRepoImpl)
	userServiceImpl := chat.NewUserServiceImpl(userRepoCacheImpl)
	publisher, err := infra.NewKafkaPublisher(configConfig)
	if err != nil {
		return nil, err
	}
	chatRepoImpl := chat.NewChatRepoImpl(session, publisher, configConfig)
	chatRepoCacheImpl := chat.NewChatRepoCacheImpl(chatRepoImpl)
	idGenerator, err := common.NewSonyFlake()
	if err != nil {
		return nil, err
	}
	chatServiceImpl := chat.NewChatServiceImpl(chatRepoCacheImpl, userRepoCacheImpl, idGenerator)
	channelRepoImpl := chat.NewChannelRepoImpl(session)
	channelRepoCacheImpl := chat.NewChannelRepoCacheImpl(redisCacheImpl, channelRepoImpl)
	channelServiceImpl := chat.NewChannelServiceImpl(channelRepoCacheImpl, userRepoCacheImpl, idGenerator)
	forwarderClientConn, err := chat.NewForwarderClientConn(configConfig)
	if err != nil {
		return nil, err
	}
	forwarderRepoImpl := chat.NewForwarderRepoImpl(forwarderClientConn)
	forwarderServiceImpl := chat.NewForwarderServiceImpl(forwarderRepoImpl)
	httpServer := chat.NewHttpServer(name, httpLog, configConfig, engine, melodyChatConn, messageSubscriber, userServiceImpl, chatServiceImpl, channelServiceImpl, forwarderServiceImpl)
	grpcLog, err := common.NewGrpcLog(configConfig)
	if err != nil {
		return nil, err
	}
	grpcServer := chat.NewGrpcServer(name, grpcLog, configConfig, userServiceImpl, channelServiceImpl)
	chatRouter := chat.NewRouter(httpServer, grpcServer)
	infraCloser := chat.NewInfraCloser()
	server := common.NewServer(name, chatRouter, infraCloser)
	return server, nil
}

func InitializeForwarderServer(name string) (*common.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	grpcLog, err := common.NewGrpcLog(configConfig)
	if err != nil {
		return nil, err
	}
	universalClient, err := infra.NewRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	redisCacheImpl := infra.NewRedisCacheImpl(universalClient)
	publisher, err := infra.NewKafkaPublisher(configConfig)
	if err != nil {
		return nil, err
	}
	forwarderRepoImpl := forwarder.NewForwarderRepoImpl(redisCacheImpl, publisher)
	forwarderServiceImpl := forwarder.NewForwarderServiceImpl(forwarderRepoImpl)
	router, err := infra.NewBrokerRouter(name)
	if err != nil {
		return nil, err
	}
	subscriber, err := infra.NewKafkaSubscriber(configConfig)
	if err != nil {
		return nil, err
	}
	messageSubscriber := forwarder.NewMessageSubscriber(router, subscriber, forwarderServiceImpl)
	grpcServer := forwarder.NewGrpcServer(name, grpcLog, configConfig, forwarderServiceImpl, messageSubscriber)
	forwarderRouter := forwarder.NewRouter(grpcServer)
	infraCloser := forwarder.NewInfraCloser()
	server := common.NewServer(name, forwarderRouter, infraCloser)
	return server, nil
}

func InitializeMatchServer(name string) (*common.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	httpLog, err := common.NewHttpLog(configConfig)
	if err != nil {
		return nil, err
	}
	engine := match.NewGinServer(name, httpLog, configConfig)
	melodyMatchConn := match.NewMelodyMatchConn()
	router, err := infra.NewBrokerRouter(name)
	if err != nil {
		return nil, err
	}
	userClientConn, err := match.NewUserClientConn(configConfig)
	if err != nil {
		return nil, err
	}
	chatClientConn, err := match.NewChatClientConn(configConfig)
	if err != nil {
		return nil, err
	}
	userRepoImpl := match.NewUserRepoImpl(userClientConn, chatClientConn)
	userServiceImpl := match.NewUserServiceImpl(userRepoImpl)
	subscriber, err := infra.NewKafkaSubscriber(configConfig)
	if err != nil {
		return nil, err
	}
	matchSubscriber := match.NewMatchSubscriber(name, melodyMatchConn, router, userServiceImpl, subscriber)
	universalClient, err := infra.NewRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	redisCacheImpl := infra.NewRedisCacheImpl(universalClient)
	publisher, err := infra.NewKafkaPublisher(configConfig)
	if err != nil {
		return nil, err
	}
	matchRepoImpl := match.NewMatchRepoImpl(redisCacheImpl, publisher)
	channelRepoImpl := match.NewChannelRepoImpl(chatClientConn)
	matchServiceImpl := match.NewMatchServiceImpl(matchRepoImpl, channelRepoImpl)
	httpServer := match.NewHttpServer(name, httpLog, configConfig, engine, melodyMatchConn, matchSubscriber, userServiceImpl, matchServiceImpl)
	matchRouter := match.NewRouter(httpServer)
	infraCloser := match.NewInfraCloser()
	server := common.NewServer(name, matchRouter, infraCloser)
	return server, nil
}

func InitializeUploaderServer(name string) (*common.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	httpLog, err := common.NewHttpLog(configConfig)
	if err != nil {
		return nil, err
	}
	engine := uploader.NewGinServer(name, httpLog, configConfig)
	universalClient, err := infra.NewRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	channelUploadRateLimiter := uploader.NewChannelUploadRateLimiter(universalClient, configConfig)
	httpServer := uploader.NewHttpServer(name, httpLog, configConfig, engine, channelUploadRateLimiter)
	router := uploader.NewRouter(httpServer)
	infraCloser := uploader.NewInfraCloser()
	server := common.NewServer(name, router, infraCloser)
	return server, nil
}

func InitializeUserServer(name string) (*common.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	httpLog, err := common.NewHttpLog(configConfig)
	if err != nil {
		return nil, err
	}
	engine := user.NewGinServer(name, httpLog, configConfig)
	universalClient, err := infra.NewRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	redisCacheImpl := infra.NewRedisCacheImpl(universalClient)
	userRepoImpl := user.NewUserRepoImpl(redisCacheImpl)
	idGenerator, err := common.NewSonyFlake()
	if err != nil {
		return nil, err
	}
	userServiceImpl := user.NewUserServiceImpl(userRepoImpl, idGenerator)
	httpServer := user.NewHttpServer(name, httpLog, configConfig, engine, userServiceImpl)
	grpcLog, err := common.NewGrpcLog(configConfig)
	if err != nil {
		return nil, err
	}
	grpcServer := user.NewGrpcServer(name, configConfig, grpcLog, userServiceImpl)
	router := user.NewRouter(httpServer, grpcServer)
	infraCloser := user.NewInfraCloser()
	server := common.NewServer(name, router, infraCloser)
	return server, nil
}
